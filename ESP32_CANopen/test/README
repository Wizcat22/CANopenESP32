
This directory is intended for PIO Unit Testing and project tests.

Unit Testing is a software testing method by which individual units of
source code, sets of one or more MCU program modules together with associated
control data, usage procedures, and operating procedures, are tested to
determine whether they are fit for use. Unit testing finds problems early
in the development cycle.

More information about PIO Unit Testing:
- https://docs.platformio.org/page/plus/unit-testing.html

rst:0x1 (POWERON_RESET),boot:0x13 (SPI_FAST_FLASH_BOOT)
configsip: 0, SPIWP:0xee
clk_drv:0x00,q_drv:0x00,d_drv:0x00,cs0_drv:0x00,hd_drv:0x00,wp_drv:0x00
mode:DIO, clock div:2
load:0x3fff0018,len:4
load:0x3fff001c,len:6292
load:0x40078000,len:10112
load:0x40080400,len:6492
entry 0x40080750
␛[0;32mI (29) boot: ESP-IDF 3.30300.190916 2nd stage bootloader␛[0m
␛[0;32mI (29) boot: compile time 15:48:34␛[0m
␛[0;32mI (29) boot: Enabling RNG early entropy source...␛[0m
␛[0;32mI (34) boot: SPI Speed      : 40MHz␛[0m
␛[0;32mI (38) boot: SPI Mode       : DIO␛[0m
␛[0;32mI (42) boot: SPI Flash Size : 16MB␛[0m
␛[0;32mI (46) boot: Partition Table:␛[0m
␛[0;32mI (50) boot: ## Label            Usage          Type ST Offset   Length␛[0m
␛[0;32mI (57) boot:  0 nvs              WiFi data        01 02 00009000 00006000␛[0m
␛[0;32mI (65) boot:  1 phy_init         RF data          01 01 0000f000 00001000␛[0m
␛[0;32mI (72) boot:  2 factory          factory app      00 00 00010000 00100000␛[0m
␛[0;32mI (80) boot: End of partition table␛[0m
␛[0;32mI (84) esp_image: segment 0: paddr=0x00010020 vaddr=0x3f400020 size=0x0a16c ( 41324) map␛[0m
␛[0;32mI (107) esp_image: segment 1: paddr=0x0001a194 vaddr=0x3ffbdb60 size=0x022e8 (  8936) load␛[0m
␛[0;32mI (110) esp_image: segment 2: paddr=0x0001c484 vaddr=0x40080000 size=0x00400 (  1024) load␛[0m
␛[0;32mI (114) esp_image: segment 3: paddr=0x0001c88c vaddr=0x40080400 size=0x03784 ( 14212) load␛[0m
␛[0;32mI (128) esp_image: segment 4: paddr=0x00020018 vaddr=0x400d0018 size=0x192ac (103084) map␛[0m
␛[0;32mI (166) esp_image: segment 5: paddr=0x000392cc vaddr=0x40083b84 size=0x03ccc ( 15564) load␛[0m
␛[0;32mI (177) boot: Loaded app from partition at offset 0x10000␛[0m
␛[0;32mI (177) boot: Disabling RNG early entropy source...␛[0m
␛[0;32mI (178) cpu_start: Pro cpu up.␛[0m
␛[0;32mI (181) cpu_start: Application information:␛[0m
␛[0;32mI (186) cpu_start: Project name:     ESP32_CANopen␛[0m
␛[0;32mI (192) cpu_start: App version:      1.0.0␛[0m
␛[0;32mI (197) cpu_start: Compile time:     Mar 20 2020 15:48:34␛[0m
␛[0;32mI (203) cpu_start: ELF file SHA256:  0000000000000000...␛[0m
␛[0;32mI (209) cpu_start: ESP-IDF:          3.30300.190916␛[0m
␛[0;32mI (214) cpu_start: Starting app cpu, entry point is 0x4008124c␛[0m
␛[0;32mI (0) cpu_start: App cpu up.␛[0m
␛[0;32mI (225) heap_init: Initializing. RAM available for dynamic allocation:␛[0m
␛[0;32mI (232) heap_init: At 3FFAE6E0 len 0000F480 (61 KiB): DRAM␛[0m
␛[0;32mI (238) heap_init: At 3FFC0F08 len 0001F0F8 (124 KiB): DRAM␛[0m
␛[0;32mI (244) heap_init: At 3FFE0440 len 00003AE0 (14 KiB): D/IRAM␛[0m
␛[0;32mI (250) heap_init: At 3FFE4350 len 0001BCB0 (111 KiB): D/IRAM␛[0m
␛[0;32mI (257) heap_init: At 40087850 len 000187B0 (97 KiB): IRAM␛[0m
␛[0;32mI (263) cpu_start: Pro cpu start user code␛[0m
␛[0;32mI (281) cpu_start: Chip Revision: 1␛[0m
␛[0;33mW (282) cpu_start: Chip revision is higher than the one configured in menuconfig. Suggest to upgrade it.␛[0m
␛[0;32mI (285) cpu_start: Starting scheduler on PRO CPU.␛[0m
␛[0;32mI (0) cpu_start: Starting scheduler on APP CPU.␛[0m
␛[0;31mE (0) CAN Baudrate: CAN Baudrade: 125␛[0m
␛[0;32mI (10) CO_CANsend: Message queued for transmission␛[0m
␛[0;32mI (316) CO_CANsend: Message queued for transmission␛[0m
␛[0;32mI (1316) CO_CANsend: Message queued for transmission␛[0m
␛[0;32mI (2316) CO_CANsend: Message queued for transmission␛[0m
␛[0;32mI (3316) CO_CANsend: Message queued for transmission␛[0m
␛[0;31mE (4316) CO_CANsend: CO_ERROR_TX_OVERFLOW␛[0m
␛[0;31mE (5316) CO_CANsend: (buffer->bufferFull) = TRUE; CO_ERROR_TX_OVERFLOW␛[0m
␛[0;31mE (5316) CO_CANsend: CO_ERROR_TX_OVERFLOW␛[0m
␛[0;31mE (6316) CO_CANsend: (buffer->bufferFull) = TRUE; CO_ERROR_TX_OVERFLOW␛[0m
␛[0;31mE (6316) CO_CANsend: CO_ERROR_TX_OVERFLOW␛[0m
␛[0;31mE (7316) CO_CANsend: (buffer->bufferFull) = TRUE; CO_ERROR_TX_OVERFLOW␛[0m
␛[0;31mE (7316) CO_CANsend: CO_ERROR_TX_OVERFLOW␛[0m
␛[0;31mE (8316) CO_CANsend: (buffer->bufferFull) = TRUE; CO_ERROR_TX_OVERFLOW␛[0m
␛[0;31mE (8316) CO_CANsend: CO_ERROR_TX_OVERFLOW␛[0m
␛[0;31mE (9316) CO_CANsend: (buffer->bufferFull) = TRUE; CO_ERROR_TX_OVERFLOW␛[0m
␛[0;31mE (9316) CO_CANsend: CO_ERROR_TX_OVERFLOW␛[0m
␛[0;31mE (10316) CO_CANsend: (buffer->bufferFull) = TRUE; CO_ERROR_TX_OVERFLOW␛[0m
␛[0;31mE (10316) CO_CANsend: CO_ERROR_TX_OVERFLOW␛[0m
␛[0;31mE (11316) CO_CANsend: (buffer->bufferFull) = TRUE; CO_ERROR_TX_OVERFLOW␛[0m
␛[0;31mE (11316) CO_CANsend: CO_ERROR_TX_OVERFLOW␛[0m
␛[0;31mE (12316) CO_CANsend: (buffer->bufferFull) = TRUE; CO_ERROR_TX_OVERFLOW␛[0m
␛[0;31mE (12316) CO_CANsend: CO_ERROR_TX_OVERFLOW␛[0m
␛[0;31mE (13316) CO_CANsend: (buffer->bufferFull) = TRUE; CO_ERROR_TX_OVERFLOW␛[0m
␛[0;31mE (13316) CO_CANsend: CO_ERROR_TX_OVERFLOW␛[0m
␛[0;31mE (14316) CO_CANsend: (buffer->bufferFull) = TRUE; CO_ERROR_TX_OVERFLOW␛[0m
␛[0;31mE (14316) CO_CANsend: CO_ERROR_TX_OVERFLOW␛[0m
␛[0;31mE (15316) CO_CANsend: (buffer->bufferFull) = TRUE; CO_ERROR_TX_OVERFLOW␛[0m
␛[0;31mE (15316) CO_CANsend: CO_ERROR_TX_OVERFLOW␛[0m
␛[0;31mE (16316) CO_CANsend: (buffer->bufferFull) = TRUE; CO_ERROR_TX_OVERFLOW␛[0m
␛[0;31mE (16316) CO_CANsend: CO_ERROR_TX_OVERFLOW␛[0m
␛[0;31mE (17316) CO_CANsend: (buffer->bufferFull) = TRUE; CO_ERROR_TX_OVERFLOW␛[0m
␛[0;31mE (17316) CO_CANsend: CO_ERROR_TX_OVERFLOW␛[0m
␛[0;31mE (18316) CO_CANsend: (buffer->bufferFull) = TRUE; CO_ERROR_TX_OVERFLOW␛[0m
␛[0;31mE (18316) CO_CANsend: CO_ERROR_TX_OVERFLOW␛[0m
␛[0;31mE (19316) CO_CANsend: (buffer->bufferFull) = TRUE; CO_ERROR_TX_OVERFLOW␛[0m
␛[0;31mE (19316) CO_CANsend: CO_ERROR_TX_OVERFLOW␛[0m
␛[0;31mE (20316) CO_CANsend: (buffer->bufferFull) = TRUE; CO_ERROR_TX_OVERFLOW␛[0m
␛[0;31mE (20316) CO_CANsend: CO_ERROR_TX_OVERFLOW␛[0m
␛[0;31mE (21316) CO_CANsend: (buffer->bufferFull) = TRUE; CO_ERROR_TX_OVERFLOW␛[0m
␛[0;31mE (21316) CO_CANsend: CO_ERROR_TX_OVERFLOW␛[0m